{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["App","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","createForm","form","_loop","i","_React$createElement","push","react_default","a","createElement","Form_default","Group","key","Control","className","type","name","size","defineProperty","state","letters","event","handleChange","dictionary","words","bind","assertThisInitialized","handleSubmit","index","toConsumableArray","target","value","map","x","toLowerCase","setState","preventDefault","word","letterPermutations","res","length","perms","permutations","len","substring","includes","console","log","hasOwnProperty","loadDictionary","axios","get","then","_this2","data","inline","onSubmit","Button_default","variant","onClick","item","Component","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.376d4696.chunk.js","sourcesContent":["// 3, 4, 5, 6, 7 letter words\r\n// smallest word to largest word\r\nimport React, { Component } from 'react';\r\nimport './App.css';\r\nimport axios from 'axios';\r\nimport permutations from 'permutation';\r\nimport Button from 'react-bootstrap/Button';\r\nimport Form from 'react-bootstrap/Form';\r\n\r\nclass App extends Component {\r\n\r\n  constructor(props) {\r\n    super(props)\r\n\r\n    this.state = {\r\n      dictionary: {},\r\n      words: [],\r\n      letters: [\"\", \"\", \"\", \"\", \"\", \"\", \"\"]\r\n    }\r\n\r\n    this.handleChange = this.handleChange.bind(this);\r\n    this.handleSubmit = this.handleSubmit.bind(this);\r\n  }\r\n\r\n  handleChange(event, index) {\r\n    let letters = [...this.state.letters];\r\n    letters[index] = event.target.value;\r\n\r\n    letters = letters.map(function(x){ return x.toLowerCase() })\r\n\r\n    this.setState({letters});\r\n  }\r\n\r\n  handleSubmit(event) {\r\n    event.preventDefault();\r\n\r\n    let word = \"\"\r\n    let words = []\r\n    let letterPermutations = []\r\n    let res = ''\r\n\r\n    for (let i = 0; i < this.state.letters.length; i++) {\r\n      word += this.state.letters[i]\r\n    }\r\n\r\n    let perms = permutations(word)\r\n    let len = perms.length\r\n\r\n    // get all permutations of the word in terms of 3, 4, 5, 6, and 7 letters\r\n    for (let i = 0; i < len; i++) {\r\n      res = perms[i].substring(0, 3);\r\n\r\n      if (!letterPermutations.includes(res)) {\r\n        letterPermutations.push(res)\r\n      }\r\n    }\r\n\r\n    for (let i = 0; i < len; i++) {\r\n      res = perms[i].substring(0, 4);\r\n\r\n      if (!letterPermutations.includes(res)) {\r\n        letterPermutations.push(res)\r\n      }\r\n    }\r\n\r\n    for (let i = 0; i < len; i++) {\r\n      res = perms[i].substring(0, 5);\r\n\r\n      if (!letterPermutations.includes(res)) {\r\n        letterPermutations.push(res)\r\n      }\r\n    }\r\n\r\n    for (let i = 0; i < len; i++) {\r\n      res = perms[i].substring(0, 6);\r\n\r\n      if (!letterPermutations.includes(res)) {\r\n        letterPermutations.push(res)\r\n      }\r\n    }\r\n\r\n    for (let i = 0; i < len; i++) {\r\n      res = perms[i].substring(0, 7);\r\n\r\n      if (!letterPermutations.includes(res)) {\r\n        letterPermutations.push(res)\r\n      }\r\n    }\r\n\r\n    console.log(letterPermutations)\r\n\r\n    for (let i = 0; i < letterPermutations.length; i++) {\r\n      if (this.state.dictionary.hasOwnProperty(letterPermutations[i])) {\r\n        if (!words.includes(letterPermutations[i])) {\r\n          words.push(letterPermutations[i])\r\n        }\r\n      }\r\n    }\r\n\r\n    this.setState({words});\r\n  }\r\n\r\n  async componentDidMount() {\r\n    await this.loadDictionary()\r\n  }\r\n\r\n  async loadDictionary() {\r\n    await axios.get(`./data/words_dictionary.json`)\r\n      .then(res => {\r\n        this.setState({dictionary: res.data})\r\n      })\r\n  }\r\n\r\n  createForm = () => {\r\n    let form = []\r\n\r\n    for (let i = 0; i < 7; i++) {\r\n      form.push(<Form.Group key={i}>\r\n        <Form.Control className=\"input\" type=\"text\" name=\"letter[]\" size=\"lg\" size=\"1\" maxLength=\"1\" value={this.state.letters[i]} onChange={(event) => this.handleChange(event, i)} />\r\n      </Form.Group>)\r\n    }\r\n\r\n    return form\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <div className=\"App\">\r\n        <div className=\"container\">\r\n          <h1>Letter Permutations to Words</h1>\r\n          <Form className=\"text-center\" inline onSubmit={this.handleSubmit}>\r\n            {this.createForm()}\r\n            <div className=\"submit-area\">\r\n              <Form.Group>\r\n                <Button variant=\"success\" onClick={this.handleSubmit}>Submit</Button>\r\n              </Form.Group>\r\n            </div>\r\n          </Form>\r\n        </div>\r\n\r\n        {this.state.words.map((item,i) => <li key={i}>{item}</li>)}\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport 'bootstrap/dist/css/bootstrap.min.css';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}