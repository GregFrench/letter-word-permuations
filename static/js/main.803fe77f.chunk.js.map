{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["App","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","createForm","form","_loop","i","_React$createElement","push","react_default","a","createElement","Form_default","Group","key","Control","className","type","name","size","defineProperty","state","letters","event","handleChange","createRow","item","Row_default","Col_default","dictionary","words","bind","assertThisInitialized","handleSubmit","resetLetters","index","toConsumableArray","target","value","map","x","toLowerCase","setState","index2","Array","prototype","indexOf","elements","focus","preventDefault","word","letterPermutations","res","length","perms","permutations","len","count","end","substring","includes","console","log","hasOwnProperty","sort","b","localeCompare","loadDictionary","axios","get","then","_this2","data","_this3","inline","onSubmit","Button_default","variant","onClick","Component","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.803fe77f.chunk.js","sourcesContent":["// 3, 4, 5, 6, 7 letter words\r\n// smallest word to largest word\r\nimport React, { Component } from 'react';\r\nimport './App.css';\r\nimport axios from 'axios';\r\nimport permutations from 'permutation';\r\nimport Button from 'react-bootstrap/Button';\r\nimport Form from 'react-bootstrap/Form';\r\nimport Row from 'react-bootstrap/Row';\r\nimport Col from 'react-bootstrap/Col';\r\n\r\nclass App extends Component {\r\n\r\n  constructor(props) {\r\n    super(props)\r\n\r\n    this.state = {\r\n      dictionary: {},\r\n      words: [],\r\n      letters: [\"\", \"\", \"\", \"\", \"\", \"\", \"\"]\r\n    }\r\n\r\n    this.handleChange = this.handleChange.bind(this);\r\n    this.handleSubmit = this.handleSubmit.bind(this);\r\n    this.resetLetters = this.resetLetters.bind(this);\r\n  }\r\n\r\n  handleChange(event, index) {\r\n    let letters = [...this.state.letters];\r\n    letters[index] = event.target.value;\r\n\r\n    letters = letters.map(function(x){ return x.toLowerCase() })\r\n\r\n    this.setState({letters});\r\n\r\n    //if (event.keyCode === 13) {\r\n      const form = event.target.form;\r\n      const index2 = Array.prototype.indexOf.call(form, event.target);\r\n      form.elements[index2 + 1].focus();\r\n      event.preventDefault();\r\n    //}\r\n  }\r\n\r\n  resetLetters() {\r\n    this.setState({letters: [\"\", \"\", \"\", \"\", \"\", \"\", \"\"], words: []});\r\n  }\r\n\r\n  handleSubmit(event) {\r\n    event.preventDefault();\r\n\r\n    let word = \"\"\r\n    let words = []\r\n    let letterPermutations = []\r\n    let res = ''\r\n\r\n    for (let i = 0; i < this.state.letters.length; i++) {\r\n      word += this.state.letters[i]\r\n    }\r\n\r\n    let perms = permutations(word)\r\n    let len = perms.length\r\n\r\n    // get all permutations of the word in terms of 3, 4, 5, 6, and 7 letters\r\n    let count = 0\r\n    let end = 3\r\n    for (let i = 0; i < (len * 5); i++) {\r\n      if (count === (len - 1)) {\r\n        end += 1\r\n        count = 0\r\n      }\r\n\r\n      res = perms[count].substring(0, end);\r\n\r\n      if (!letterPermutations.includes(res)) {\r\n        letterPermutations.push(res)\r\n      }\r\n\r\n      count += 1\r\n    }\r\n\r\n    console.log(letterPermutations)\r\n\r\n    for (let i = 0; i < letterPermutations.length; i++) {\r\n      if (this.state.dictionary.hasOwnProperty(letterPermutations[i])) {\r\n        if (!words.includes(letterPermutations[i])) {\r\n          words.push(letterPermutations[i])\r\n        }\r\n      }\r\n    }\r\n\r\n    words.sort(function(a, b) {\r\n      return a.length - b.length || a.localeCompare(b)\r\n    })\r\n\r\n    this.setState({words});\r\n  }\r\n\r\n  async componentDidMount() {\r\n    await this.loadDictionary()\r\n  }\r\n\r\n  async loadDictionary() {\r\n    await axios.get(`./data/words_dictionary.json`)\r\n      .then(res => {\r\n        this.setState({dictionary: res.data})\r\n      })\r\n  }\r\n\r\n  createForm = () => {\r\n    let form = []\r\n\r\n    for (let i = 0; i < 7; i++) {\r\n      form.push(<Form.Group key={i}>\r\n        <Form.Control className=\"input\" type=\"text\" name=\"letter[]\" size=\"lg\" size=\"1\" maxLength=\"1\" value={this.state.letters[i]} onChange={(event) => this.handleChange(event, i)} />\r\n      </Form.Group>)\r\n    }\r\n\r\n    return form\r\n  }\r\n\r\n  createRow = (item, i) => {\r\n    return (\r\n      <Row key={i}><Col>{item}</Col></Row>\r\n    )\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <div className=\"App\">\r\n        <div className=\"container\">\r\n          <header>\r\n            <h1>Letter Permutations to Words</h1>\r\n          </header>\r\n          <Form className=\"text-center\" inline onSubmit={this.handleSubmit}>\r\n            {this.createForm()}\r\n              <Form.Group>\r\n                <Button className=\"button\" variant=\"success\" onClick={this.handleSubmit}>Submit</Button>\r\n              </Form.Group>\r\n              <Form.Group>\r\n                <Button variant=\"danger\" onClick={this.resetLetters}>Reset</Button>\r\n              </Form.Group>\r\n          </Form>\r\n        </div>\r\n\r\n        {\r\n          this.state.words.map((item,i) => {\r\n            return (\r\n              this.createRow(item, i)\r\n            )\r\n          })}\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.1/8 is considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl)\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\nimport 'bootstrap/dist/css/bootstrap.min.css';\r\n\r\nReactDOM.render(<App />, document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}